;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode_code_data(slice $to, cell $body, int $value, int $mode, cell $code, cell $data) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice $to, cell $body, int $value, int $mode) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: BuyTickets
;; Header: 0xfce61496
;; TLB: buy_tickets#fce61496 numberOfTickets:uint32 = BuyTickets
;;

(slice, ((int))) $BuyTickets$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4242936982);
    var v'numberOfTickets = sc_0~load_uint(32);
    return (sc_0, (v'numberOfTickets));
}

;;
;; Type: InternalSendAmount
;; Header: 0x1071e1af
;; TLB: internal_send_amount#1071e1af addr:address amount:coins = InternalSendAmount
;;

(slice, ((slice, int))) $InternalSendAmount$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 275898799);
    var v'addr = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'addr, v'amount));
}

;;
;; Type: InternalAddAmount
;; Header: 0x60d42457
;; TLB: internal_add_amount#60d42457 amount:coins = InternalAddAmount
;;

builder $InternalAddAmount$_store(builder build_0, (int) v) inline {
    var (v'amount) = v;
    build_0 = store_uint(build_0, 1624515671, 32);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $InternalAddAmount$_store_cell((int) v) inline {
    return $InternalAddAmount$_store(begin_cell(), v).end_cell();
}

((int)) $InternalAddAmount$_constructor_amount(int $amount) inline {
    return ($amount);
}

;;
;; Type: InternalSetHolder
;; Header: 0x922a84a7
;; TLB: internal_set_holder#922a84a7 holder:address = InternalSetHolder
;;

builder $InternalSetHolder$_store(builder build_0, (slice) v) inline {
    var (v'holder) = v;
    build_0 = store_uint(build_0, 2452260007, 32);
    build_0 = __tact_store_address(build_0, v'holder);
    return build_0;
}

cell $InternalSetHolder$_store_cell((slice) v) inline {
    return $InternalSetHolder$_store(begin_cell(), v).end_cell();
}

((slice)) $InternalSetHolder$_constructor_holder(slice $holder) inline {
    return ($holder);
}

;;
;; Type: Holder
;;

builder $Holder$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'addr, v'parent) = v;
    build_0 = __tact_store_address(build_0, v'addr);
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(cell, cell) $Holder$_init_child(cell sys', slice $addr, slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Holder
    cell mine = __tact_dict_get_code(source, 57398);
    contracts = __tact_dict_set_code(contracts, 57398, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Holder$init$_store(b, ($addr, $parent));
    return (mine, b.end_cell());
}

;;
;; Type: Ticket
;;

builder $Ticket$init$_store(builder build_0, (int, slice) v) inline {
    var (v'seqno, v'parent) = v;
    build_0 = build_0.store_int(v'seqno, 257);
    build_0 = __tact_store_address(build_0, v'parent);
    return build_0;
}

(cell, cell) $Ticket$_init_child(cell sys', int $seqno, slice $parent) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Ticket
    cell mine = __tact_dict_get_code(source, 42189);
    contracts = __tact_dict_set_code(contracts, 42189, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Ticket$init$_store(b, ($seqno, $parent));
    return (mine, b.end_cell());
}

;;
;; Type: TONLottery
;;

builder $TONLottery$_store(builder build_0, (slice, int, int, int, int) v) inline {
    var (v'owner, v'ticketNumber, v'deployTime, v'isActive, v'isFinished) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'ticketNumber, 32);
    build_0 = build_0.store_uint(v'deployTime, 32);
    build_0 = build_0.store_int(v'isActive, 1);
    build_0 = build_0.store_int(v'isFinished, 1);
    return build_0;
}

(slice, ((slice, int, int, int, int))) $TONLottery$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'ticketNumber = sc_0~load_uint(32);
    var v'deployTime = sc_0~load_uint(32);
    var v'isActive = sc_0~load_int(1);
    var v'isFinished = sc_0~load_int(1);
    return (sc_0, (v'owner, v'ticketNumber, v'deployTime, v'isActive, v'isFinished));
}

(slice, int, int, int, int) $TONLottery$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$TONLottery$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $TONLottery$_contract_init();
    }
}

() $TONLottery$_contract_store((slice, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $TONLottery$_store(b, v);
    set_data(b.end_cell());
}