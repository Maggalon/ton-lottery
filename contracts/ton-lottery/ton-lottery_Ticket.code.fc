#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "ton-lottery_Ticket.headers.fc";
#include "ton-lottery_Ticket.stdlib.fc";
#include "ton-lottery_Ticket.constants.fc";
#include "ton-lottery_Ticket.storage.fc";

;;
;; Contract Ticket functions
;;

(int, slice, slice) $Ticket$_contract_init(int $seqno, slice $parent) impure inline_ref {
    var (($self'seqno, $self'parent, $self'holder)) = (null(), null(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c());
    $self'seqno = $seqno;
    $self'parent = $parent;
    return ($self'seqno, $self'parent, $self'holder);
}

((int, slice, slice), slice) $Ticket$_fun_getHolder((int, slice, slice) $self) impure inline_ref {
    var (($self'seqno, $self'parent, $self'holder)) = $self;
    var $fresh$ret_3 = $self'holder;
    return (($self'seqno, $self'parent, $self'holder), $fresh$ret_3);
}

;;
;; Receivers of a Contract Ticket
;;

(((int, slice, slice)), ()) $Ticket$_internal_binary_InternalSetHolder((int, slice, slice) $self, (slice) $msg) impure inline {
    var ($self'seqno, $self'parent, $self'holder) = $self;
    var ($msg'holder) = $msg;
    throw_unless(54404, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $self'holder = $msg'holder;
    return (($self'seqno, $self'parent, $self'holder), ());
}

((int, slice, slice), ()) $Ticket$_internal_text_7276e3adb1b4c34af9f0c13ce18fb84a3fd6ba8a48455fc3d0c9a7eec2e120c5((int, slice, slice) $self) impure inline {
    var ($self'seqno, $self'parent, $self'holder) = $self;
    throw_unless(54404, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode($self'holder, 0, 130));
    return (($self'seqno, $self'parent, $self'holder), ());
}

;;
;; Get methods of a Contract Ticket
;;

_ %getHolder() method_id(76057) {
    var self = $Ticket$_contract_load();
    var res = self~$Ticket$_fun_getHolder();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Ticket
;;

((int, slice, slice), int) $Ticket$_contract_router_internal((int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalSetHolder message
    if (op == 2452260007) {
        var msg = in_msg~$InternalSetHolder$_load();
        self~$Ticket$_internal_binary_InternalSetHolder(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Reward winner" message
        if (text_op == 0x7276e3adb1b4c34af9f0c13ce18fb84a3fd6ba8a48455fc3d0c9a7eec2e120c5) {
            self~$Ticket$_internal_text_7276e3adb1b4c34af9f0c13ce18fb84a3fd6ba8a48455fc3d0c9a7eec2e120c5();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Ticket$_contract_load();
    
    ;; Handle operation
    int handled = self~$Ticket$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Ticket$_contract_store(self);
}
